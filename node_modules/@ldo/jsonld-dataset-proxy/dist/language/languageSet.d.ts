import type { PredicateNode, SubjectNode } from "@ldo/rdf-utils";
import type { LanguageKey } from "./languageTypes";
import type { ProxyContext } from "../ProxyContext";
export default class LanguageSet implements Set<string> {
    private subject;
    private predicate;
    private languageKey;
    private proxyContext;
    constructor(subject: SubjectNode, predicate: PredicateNode, languageKey: LanguageKey, proxyContext: ProxyContext);
    private matchThis;
    private getLiteral;
    get size(): number;
    add(value: string): this;
    clear(): void;
    delete(value: string): boolean;
    forEach(callbackfn: (value: string, value2: string, set: Set<string>) => void, thisArg?: any): void;
    has(item: string): boolean;
    entries(): IterableIterator<[string, string]>;
    keys(): IterableIterator<string>;
    values(): IterableIterator<string>;
    [Symbol.iterator](): IterableIterator<string>;
    [Symbol.toStringTag]: string;
}
