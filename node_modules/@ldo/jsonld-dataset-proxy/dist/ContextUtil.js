"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContextUtil = void 0;
const shorthandToIriMap = {
    "@type": "http://www.w3.org/1999/02/22-rdf-syntax-ns#type",
};
class ContextUtil {
    constructor(context) {
        this.context = context;
        this.iriToKeyMap = {};
        this.iriToKeyMap = this.createIriToKeyMap(context);
        this.typeNameToIriToKeyMap = {};
        Object.entries(context).forEach(([contextKey, contextValue]) => {
            if (typeof contextValue === "object" &&
                contextValue !== null &&
                !!contextValue["@id"] &&
                contextValue["@context"]) {
                this.typeNameToIriToKeyMap[contextKey] = this.createIriToKeyMap(contextValue["@context"]);
            }
        });
    }
    createIriToKeyMap(context) {
        const iriToKeyMap = {};
        Object.entries(context).forEach(([contextKey, contextValue]) => {
            if (typeof contextValue === "string") {
                iriToKeyMap[this.keyIdToIri(contextValue)] = contextKey;
            }
            else if (typeof contextValue === "object" &&
                contextValue !== null &&
                !!contextValue["@id"]) {
                const iri = this.keyIdToIri(contextValue["@id"]);
                iriToKeyMap[iri] = contextKey;
            }
        });
        return iriToKeyMap;
    }
    getRelevantContext(key, typeNames) {
        for (const typeNameNode of typeNames) {
            const typeName = this.iriToKey(typeNameNode.value, []);
            if (typeof this.context[typeName] === "object" &&
                this.context[typeName]?.["@context"] &&
                this.context[typeName]?.["@context"][key]) {
                return this.context[typeName]?.["@context"];
            }
        }
        return this.context;
    }
    keyIdToIri(keyId) {
        if (shorthandToIriMap[keyId]) {
            return shorthandToIriMap[keyId];
        }
        else {
            return keyId;
        }
    }
    keyToIri(key, typeName) {
        const relevantContext = this.getRelevantContext(key, typeName);
        if (!relevantContext[key]) {
            return key;
        }
        else if (typeof relevantContext[key] === "string") {
            return this.keyIdToIri(relevantContext[key]);
        }
        else if (relevantContext[key] && relevantContext[key]["@id"]) {
            return this.keyIdToIri(relevantContext[key]["@id"]);
        }
        return key;
    }
    iriToKey(iri, typeNames) {
        let relevantMap = this.iriToKeyMap;
        for (const typeNameNode of typeNames) {
            const typeName = this.iriToKey(typeNameNode.value, []);
            relevantMap = this.typeNameToIriToKeyMap[typeName]?.[iri]
                ? this.typeNameToIriToKeyMap[typeName]
                : this.iriToKeyMap;
        }
        if (relevantMap[iri]) {
            return relevantMap[iri];
        }
        return iri;
    }
    getDataType(key, typeName) {
        const relevantContext = this.getRelevantContext(key, typeName);
        if (typeof relevantContext[key] === "object" &&
            relevantContext[key]["@type"]) {
            return relevantContext[key]["@type"];
        }
        return "http://www.w3.org/2001/XMLSchema#string";
    }
    isArray(key, typeName) {
        const relevantContext = this.getRelevantContext(key, typeName);
        return !!(relevantContext[key] &&
            typeof relevantContext[key] === "object" &&
            (relevantContext[key]["@container"] ===
                "@set" ||
                relevantContext[key]["@isCollection"]));
    }
    isLangString(key, typeName) {
        const relevantContext = this.getRelevantContext(key, typeName);
        return !!(relevantContext[key] &&
            typeof relevantContext[key] === "object" &&
            relevantContext[key]["@type"] &&
            relevantContext[key]["@type"] ===
                "http://www.w3.org/1999/02/22-rdf-syntax-ns#langString");
    }
}
exports.ContextUtil = ContextUtil;
//# sourceMappingURL=ContextUtil.js.map