import type { GraphNode, QuadMatch, SubjectNode } from "@ldo/rdf-utils";
import type { BlankNode, Dataset, NamedNode } from "@rdfjs/types";
import type { ArrayProxyTarget } from "./arrayProxy/createArrayHandler";
import type { SubjectProxy } from "./subjectProxy/SubjectProxy";
import type { ArrayProxy } from "./arrayProxy/ArrayProxy";
import type { ContextUtil } from "./ContextUtil";
import type { LanguageOrdering } from "./language/languageTypes";
export interface ProxyContextOptions {
    dataset: Dataset;
    contextUtil: ContextUtil;
    writeGraphs: GraphNode[];
    languageOrdering: LanguageOrdering;
    prefilledArrayTargets?: ArrayProxyTarget[];
    state?: Record<string, unknown>;
}
export declare class ProxyContext {
    private subjectMap;
    private arrayMap;
    readonly dataset: Dataset;
    readonly contextUtil: ContextUtil;
    readonly writeGraphs: GraphNode[];
    readonly languageOrdering: LanguageOrdering;
    state: Record<string, unknown>;
    constructor(options: ProxyContextOptions);
    createSubjectProxy(node: NamedNode | BlankNode): SubjectProxy;
    protected createSubjectHandler(): ProxyHandler<import("./subjectProxy/createSubjectHandler").SubjectProxyTarget>;
    private getArrayKey;
    createArrayProxy(quadMatch: QuadMatch, isSubjectOriented?: boolean, initialTarget?: ArrayProxyTarget, isLangStringArray?: boolean): ArrayProxy;
    protected createArrayHandler(): ProxyHandler<ArrayProxyTarget>;
    duplicate(alternativeOptions: Partial<ProxyContextOptions>): ProxyContext;
    getRdfType(subjectNode: SubjectNode): NamedNode[];
}
