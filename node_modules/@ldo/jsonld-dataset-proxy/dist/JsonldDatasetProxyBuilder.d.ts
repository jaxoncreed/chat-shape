import type { BlankNode, NamedNode } from "@rdfjs/types";
import type { GraphNode, QuadMatch } from "@ldo/rdf-utils";
import type { LanguageOrdering } from "./language/languageTypes";
import type { ProxyContext } from "./ProxyContext";
import type { ObjectLike } from "./types";
export declare class JsonldDatasetProxyBuilder {
    private proxyContext;
    constructor(proxyContext: ProxyContext);
    write(...graphs: GraphNode[]): JsonldDatasetProxyBuilder;
    setLanguagePreferences(...languageOrdering: LanguageOrdering): JsonldDatasetProxyBuilder;
    fromSubject<T extends ObjectLike>(subject: NamedNode | BlankNode): T;
    matchSubject<T extends ObjectLike>(predicate?: QuadMatch[1], object?: QuadMatch[2], graph?: QuadMatch[3]): T[];
    matchObject<T extends ObjectLike>(subject?: QuadMatch[0], predicate?: QuadMatch[1], graph?: QuadMatch[3]): T[];
    fromJson<T extends ObjectLike>(inputData: T): T;
}
