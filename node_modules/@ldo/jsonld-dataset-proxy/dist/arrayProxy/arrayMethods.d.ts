import type { ArrayProxyTarget } from "./createArrayHandler";
import type { ObjectJsonRepresentation } from "../util/nodeToJsonldRepresentation";
import type { ProxyContext } from "../ProxyContext";
export type methodBuilder<Return> = (target: ArrayProxyTarget, key: string, proxyContext: ProxyContext) => Return;
export interface ArrayMethodBuildersType {
    copyWithin: methodBuilder<Array<ObjectJsonRepresentation>["copyWithin"]>;
    fill: methodBuilder<Array<ObjectJsonRepresentation>["fill"]>;
    pop: methodBuilder<Array<ObjectJsonRepresentation>["pop"]>;
    push: methodBuilder<Array<ObjectJsonRepresentation>["push"]>;
    reverse: methodBuilder<Array<ObjectJsonRepresentation>["reverse"]>;
    shift: methodBuilder<Array<ObjectJsonRepresentation>["shift"]>;
    sort: methodBuilder<Array<ObjectJsonRepresentation>["sort"]>;
    splice: methodBuilder<Array<ObjectJsonRepresentation>["splice"]>;
    unshift: methodBuilder<Array<ObjectJsonRepresentation>["unshift"]>;
}
export declare const methodNames: Set<keyof ArrayMethodBuildersType>;
export declare const arrayMethodsBuilders: ArrayMethodBuildersType;
