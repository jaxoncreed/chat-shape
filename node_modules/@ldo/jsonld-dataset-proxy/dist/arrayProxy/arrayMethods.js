"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.arrayMethodsBuilders = exports.methodNames = void 0;
const nodeToJsonldRepresentation_1 = require("../util/nodeToJsonldRepresentation");
const modifyArray_1 = require("./modifyArray");
exports.methodNames = new Set([
    "copyWithin",
    "fill",
    "pop",
    "push",
    "reverse",
    "shift",
    "sort",
    "splice",
    "unshift",
]);
exports.arrayMethodsBuilders = {
    copyWithin: (target, key, proxyContext) => {
        return (targetIndex, start, end) => {
            return (0, modifyArray_1.modifyArray)({
                target,
                key,
                quadsToDelete: (quads) => {
                    const oldQuads = [...quads];
                    const newQuadSet = new Set(quads.copyWithin(targetIndex, start, end));
                    return oldQuads.filter((oldQuad) => !newQuadSet.has(oldQuad));
                },
                modifyCoreArray: (coreArray) => {
                    coreArray.copyWithin(targetIndex, start, end);
                    return proxyContext.createArrayProxy(target[0], target[2]);
                },
            }, proxyContext);
        };
    },
    fill: (target, key, proxyContext) => {
        return (value, start, end) => {
            return (0, modifyArray_1.modifyArray)({
                target,
                key,
                toAdd: [value],
                quadsToDelete: (quads) => {
                    return quads.slice(start, end);
                },
                modifyCoreArray: (coreArray, addedValues) => {
                    coreArray.fill(addedValues[0], start, end);
                    return proxyContext.createArrayProxy(target[0], target[2]);
                },
            }, proxyContext);
        };
    },
    pop: (target, key, proxyContext) => {
        return () => {
            return (0, modifyArray_1.modifyArray)({
                target,
                key,
                quadsToDelete: (quads) => {
                    return quads[quads.length - 1] ? [quads[quads.length - 1]] : [];
                },
                modifyCoreArray: (coreArray) => {
                    const popped = coreArray.pop();
                    return popped
                        ? (0, nodeToJsonldRepresentation_1.nodeToJsonldRepresentation)(popped, proxyContext)
                        : undefined;
                },
            }, proxyContext);
        };
    },
    push: (target, key, proxyContext) => {
        return (...args) => {
            return (0, modifyArray_1.modifyArray)({
                target,
                key,
                toAdd: args,
                modifyCoreArray: (coreArray, addedValues) => {
                    coreArray.push(...addedValues);
                    return proxyContext.createArrayProxy(target[0], target[2]).length;
                },
            }, proxyContext);
        };
    },
    reverse: (target, _key, proxyContext) => {
        return () => {
            target[1].reverse();
            return proxyContext.createArrayProxy(target[0], target[2]);
        };
    },
    shift: (target, key, proxyContext) => {
        return () => {
            return (0, modifyArray_1.modifyArray)({
                target,
                key,
                quadsToDelete: (quads) => {
                    return quads[0] ? [quads[0]] : [];
                },
                modifyCoreArray: (coreArray) => {
                    const shifted = coreArray.shift();
                    return shifted
                        ? (0, nodeToJsonldRepresentation_1.nodeToJsonldRepresentation)(shifted, proxyContext)
                        : undefined;
                },
            }, proxyContext);
        };
    },
    sort: (target, _key, proxyContext) => {
        return (compareFunction) => {
            if (compareFunction) {
                target[1].sort((a, b) => {
                    return compareFunction((0, nodeToJsonldRepresentation_1.nodeToJsonldRepresentation)(a, proxyContext), (0, nodeToJsonldRepresentation_1.nodeToJsonldRepresentation)(b, proxyContext));
                });
            }
            else if (target) {
                target[1].sort((a, b) => {
                    const aReal = (0, nodeToJsonldRepresentation_1.nodeToJsonldRepresentation)(a, proxyContext);
                    const bReal = (0, nodeToJsonldRepresentation_1.nodeToJsonldRepresentation)(b, proxyContext);
                    if (aReal > bReal) {
                        return 1;
                    }
                    else if (bReal > aReal) {
                        return -1;
                    }
                    else {
                        return 0;
                    }
                });
            }
            return proxyContext.createArrayProxy(target[0], target[2]);
        };
    },
    splice: (target, key, proxyContext) => {
        return (start, deleteCount, ...items) => {
            return (0, modifyArray_1.modifyArray)({
                target,
                key,
                toAdd: items,
                quadsToDelete: (quads) => {
                    return quads.splice(start, deleteCount);
                },
                modifyCoreArray: (coreArray, addedValues) => {
                    const spliced = coreArray.splice(start, deleteCount || 0, ...addedValues);
                    return spliced.map((node) => {
                        return (0, nodeToJsonldRepresentation_1.nodeToJsonldRepresentation)(node, proxyContext);
                    });
                },
            }, proxyContext);
        };
    },
    unshift: (target, key, proxyContext) => {
        return (...args) => {
            return (0, modifyArray_1.modifyArray)({
                target,
                key,
                toAdd: args,
                modifyCoreArray: (coreArray, addedValues) => {
                    coreArray.unshift(...addedValues);
                    return proxyContext.createArrayProxy(target[0], target[2]).length;
                },
            }, proxyContext);
        };
    },
};
//# sourceMappingURL=arrayMethods.js.map