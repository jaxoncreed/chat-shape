"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSubjectHandler = void 0;
const data_model_1 = require("@rdfjs/data-model");
const addObjectToDataset_1 = require("../util/addObjectToDataset");
const deleteFromDataset_1 = require("./deleteFromDataset");
const types_1 = require("../types");
const getValueForKey_1 = require("./getValueForKey");
function createSubjectHandler(initialProxyContext) {
    let proxyContext = initialProxyContext;
    return {
        get(target, key) {
            switch (key) {
                case types_1._getUnderlyingDataset:
                    return proxyContext.dataset;
                case types_1._getUnderlyingNode:
                    return target["@id"];
                case types_1._proxyContext:
                    return proxyContext;
                case types_1._writeGraphs:
                    return proxyContext.writeGraphs;
                case "@context":
                    return proxyContext.contextUtil.context;
            }
            return (0, getValueForKey_1.getValueForKey)(target, key, proxyContext);
        },
        getOwnPropertyDescriptor(target, key) {
            return {
                value: (0, getValueForKey_1.getValueForKey)(target, key, proxyContext),
                writable: true,
                enumerable: true,
                configurable: true,
            };
        },
        ownKeys(target) {
            const subject = target["@id"];
            const tripleDataset = proxyContext.dataset.match(subject);
            const keys = new Set(["@id"]);
            tripleDataset.toArray().forEach((quad) => {
                keys.add(proxyContext.contextUtil.iriToKey(quad.predicate.value, proxyContext.getRdfType(subject)));
            });
            return Array.from(keys);
        },
        set: (target, key, value) => {
            if (key === types_1._proxyContext) {
                proxyContext = value;
                return true;
            }
            if (key === "@id" && typeof value === "string") {
                const currentSubjectQuads = proxyContext.dataset
                    .match(target["@id"])
                    .toArray();
                const newSubjectQuads = currentSubjectQuads.map((curQuad) => (0, data_model_1.quad)((0, data_model_1.namedNode)(value), curQuad.predicate, curQuad.object, curQuad.graph));
                currentSubjectQuads.forEach((curQuad) => proxyContext.dataset.delete(curQuad));
                proxyContext.dataset.addAll(newSubjectQuads);
                const currentObjectQuads = proxyContext.dataset
                    .match(undefined, undefined, target["@id"])
                    .toArray();
                const newObjectQuads = currentObjectQuads.map((curQuad) => (0, data_model_1.quad)(curQuad.subject, curQuad.predicate, (0, data_model_1.namedNode)(value), curQuad.graph));
                currentObjectQuads.forEach((curQuad) => proxyContext.dataset.delete(curQuad));
                proxyContext.dataset.addAll(newObjectQuads);
                target["@id"] = (0, data_model_1.namedNode)(value);
            }
            (0, addObjectToDataset_1.addObjectToDataset)({ "@id": target["@id"], [key]: value }, true, proxyContext);
            return true;
        },
        deleteProperty(target, key) {
            return (0, deleteFromDataset_1.deleteValueFromDataset)(target, key, proxyContext);
        },
    };
}
exports.createSubjectHandler = createSubjectHandler;
//# sourceMappingURL=createSubjectHandler.js.map