"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getValueForKey = void 0;
const data_model_1 = require("@rdfjs/data-model");
const nodeToJsonldRepresentation_1 = require("../util/nodeToJsonldRepresentation");
const languageUtils_1 = require("../language/languageUtils");
function getValueForKey(target, key, proxyContext) {
    const { contextUtil, dataset } = proxyContext;
    if (key === "@id") {
        if (target["@id"].termType === "BlankNode") {
            return undefined;
        }
        return contextUtil.iriToKey(target["@id"].value, []);
    }
    if (key === "toString" || key === Symbol.toStringTag) {
        return Reflect.get(target, "toString");
    }
    if (typeof key === "symbol") {
        return;
    }
    const subject = target["@id"];
    const rdfType = proxyContext.getRdfType(subject);
    const predicate = (0, data_model_1.namedNode)(contextUtil.keyToIri(key, rdfType));
    if (contextUtil.isArray(key, rdfType)) {
        const arrayProxy = proxyContext.createArrayProxy([subject, predicate, null, null], false, undefined, contextUtil.isLangString(key, rdfType));
        return arrayProxy;
    }
    let objectDataset = dataset.match(subject, predicate);
    if (contextUtil.isLangString(key, rdfType)) {
        objectDataset = (0, languageUtils_1.filterQuadsByLanguageOrdering)(objectDataset, proxyContext.languageOrdering);
    }
    if (objectDataset.size === 0) {
        return undefined;
    }
    else if (objectDataset.size === 1) {
        const thing = (0, nodeToJsonldRepresentation_1.nodeToJsonldRepresentation)(objectDataset.toArray()[0].object, proxyContext);
        return thing;
    }
    else {
        return proxyContext.createArrayProxy([subject, predicate, null, null]);
    }
}
exports.getValueForKey = getValueForKey;
//# sourceMappingURL=getValueForKey.js.map