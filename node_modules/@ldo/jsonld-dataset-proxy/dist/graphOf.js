"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.graphOf = void 0;
const data_model_1 = require("@rdfjs/data-model");
const isSubjectProxy_1 = require("./subjectProxy/isSubjectProxy");
const types_1 = require("./types");
function graphOf(subject, predicate, object) {
    const subjectProxy = (0, isSubjectProxy_1.getSubjectProxyFromObject)(subject);
    const proxyContext = subjectProxy[types_1._proxyContext];
    const subjectNode = subjectProxy[types_1._getUnderlyingNode];
    const predicateNode = (0, data_model_1.namedNode)(proxyContext.contextUtil.keyToIri(predicate, proxyContext.getRdfType(subjectNode)));
    let objectNode;
    if (object == null) {
        objectNode = null;
    }
    else if (typeof object === "number") {
        const proxyArray = subject[predicate];
        if (!proxyArray[types_1._getUnderlyingMatch]) {
            throw new Error(`Key "${String(predicate)}" of ${subject} is not an array.`);
        }
        if (!proxyArray[object]) {
            throw new Error(`Index ${object} does not exist.`);
        }
        if ((0, isSubjectProxy_1.isSubjectProxy)(proxyArray[object])) {
            objectNode = proxyArray[object][1];
        }
        objectNode = proxyArray[types_1._getNodeAtIndex](object);
    }
    else {
        const objectProxy = (0, isSubjectProxy_1.getSubjectProxyFromObject)(object);
        objectNode = objectProxy[types_1._getUnderlyingNode];
    }
    const quads = subjectProxy[types_1._getUnderlyingDataset].match(subjectNode, predicateNode, objectNode);
    return quads.toArray().map((quad) => quad.graph);
}
exports.graphOf = graphOf;
//# sourceMappingURL=graphOf.js.map