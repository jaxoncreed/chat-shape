import { Traverser } from "@ldo/type-traverser";
export declare const ShexJTraverser: Traverser<{
    Schema: {
        kind: "interface";
        type: import("./ShexJTypes").Schema;
        properties: {
            startActs: "SemAct";
            start: "shapeExprOrRef";
            imports: "IRIREF";
            shapes: "ShapeDecl";
        };
    };
    ShapeDecl: {
        kind: "interface";
        type: import("./ShexJTypes").ShapeDecl;
        properties: {
            id: "shapeDeclLabel";
            abstract: "BOOL";
            restricts: "shapeExprOrRef";
            shapeExpr: "shapeExpr";
        };
    };
    shapeExpr: {
        kind: "union";
        type: import("./ShexJTypes").shapeExpr;
        typeNames: "ShapeOr" | "ShapeAnd" | "ShapeNot" | "ShapeExternal" | "NodeConstraint" | "Shape";
    };
    shapeExprOrRef: {
        kind: "union";
        type: import("./ShexJTypes").shapeExprOrRef;
        typeNames: "shapeExpr" | "shapeDeclRef";
    };
    ShapeOr: {
        kind: "interface";
        type: import("./ShexJTypes").ShapeOr;
        properties: {
            shapeExprs: "shapeExprOrRef";
        };
    };
    ShapeAnd: {
        kind: "interface";
        type: import("./ShexJTypes").ShapeAnd;
        properties: {
            shapeExprs: "shapeExprOrRef";
        };
    };
    ShapeNot: {
        kind: "interface";
        type: import("./ShexJTypes").ShapeNot;
        properties: {
            shapeExpr: "shapeExprOrRef";
        };
    };
    ShapeExternal: {
        kind: "interface";
        type: import("./ShexJTypes").ShapeExternal;
        properties: Record<string, never>;
    };
    shapeDeclRef: {
        kind: "union";
        type: import("./ShexJTypes").shapeDeclRef;
        typeNames: "ShapeDecl" | "shapeDeclLabel";
    };
    shapeDeclLabel: {
        kind: "union";
        type: string;
        typeNames: "IRIREF" | "BNODE";
    };
    NodeConstraint: {
        kind: "interface";
        type: import("./ShexJTypes").NodeConstraint;
        properties: {
            datatype: "IRIREF";
            values: "valueSetValue";
            length: "INTEGER";
            minlength: "INTEGER";
            maxlength: "INTEGER";
            pattern: "STRING";
            flags: "STRING";
            mininclusive: "numericLiteral";
            minexclusive: "numericLiteral";
            totaldigits: "INTEGER";
            fractiondigits: "INTEGER";
            semActs: "SemAct";
            annotations: "Annotation";
        };
    };
    numericLiteral: {
        kind: "union";
        type: number;
        typeNames: "INTEGER" | "DECIMAL" | "DOUBLE";
    };
    valueSetValue: {
        kind: "union";
        type: import("./ShexJTypes").valueSetValue;
        typeNames: "IriStem" | "IriStemRange" | "LiteralStem" | "LiteralStemRange" | "Language" | "LanguageStem" | "LanguageStemRange" | "objectValue";
    };
    objectValue: {
        kind: "union";
        type: import("./ShexJTypes").objectValue;
        typeNames: "IRIREF" | "ObjectLiteral";
    };
    ObjectLiteral: {
        kind: "interface";
        type: import("./ShexJTypes").ObjectLiteral;
        properties: {
            value: "STRING";
            language: "STRING";
            type: "STRING";
        };
    };
    IriStem: {
        kind: "interface";
        type: import("./ShexJTypes").IriStem;
        properties: {
            stem: "IRIREF";
        };
    };
    IriStemRange: {
        kind: "interface";
        type: import("./ShexJTypes").IriStemRange;
        properties: {
            stem: "IRIREF";
            exclusions: "IriStemRangeExclusions";
        };
    };
    IriStemRangeExclusions: {
        kind: "union";
        type: string | import("./ShexJTypes").IriStem;
        typeNames: "IriStem" | "IRIREF";
    };
    LiteralStem: {
        kind: "interface";
        type: import("./ShexJTypes").LiteralStem;
        properties: {
            stem: "STRING";
        };
    };
    LiteralStemRange: {
        kind: "interface";
        type: import("./ShexJTypes").LiteralStemRange;
        properties: {
            stem: "LiteralStemRangeStem";
            exclusions: "LiteralStemRangeExclusions";
        };
    };
    LiteralStemRangeStem: {
        kind: "union";
        type: string | import("./ShexJTypes").Wildcard;
        typeNames: "Wildcard" | "STRING";
    };
    LiteralStemRangeExclusions: {
        kind: "union";
        type: string | import("./ShexJTypes").LiteralStem;
        typeNames: "LiteralStem" | "STRING";
    };
    Language: {
        kind: "interface";
        type: import("./ShexJTypes").Language;
        properties: {
            languageTag: "LANGTAG";
        };
    };
    LanguageStem: {
        kind: "interface";
        type: import("./ShexJTypes").LanguageStem;
        properties: {
            stem: "LANGTAG";
        };
    };
    LanguageStemRange: {
        kind: "interface";
        type: import("./ShexJTypes").LanguageStemRange;
        properties: {
            stem: "LanguageStemRangeStem";
            exclusions: "LanguageStemRangeExclusions";
        };
    };
    LanguageStemRangeStem: {
        kind: "union";
        type: string | import("./ShexJTypes").Wildcard;
        typeNames: "Wildcard" | "LANGTAG";
    };
    LanguageStemRangeExclusions: {
        kind: "union";
        type: string | import("./ShexJTypes").LanguageStem;
        typeNames: "LanguageStem" | "LANGTAG";
    };
    Wildcard: {
        kind: "interface";
        type: import("./ShexJTypes").Wildcard;
        properties: Record<string, never>;
    };
    Shape: {
        kind: "interface";
        type: import("./ShexJTypes").Shape;
        properties: {
            closed: "BOOL";
            extra: "IRIREF";
            extends: "shapeExprOrRef";
            expression: "tripleExprOrRef";
            semActs: "SemAct";
            annotations: "Annotation";
        };
    };
    tripleExpr: {
        kind: "union";
        type: import("./ShexJTypes").tripleExpr;
        typeNames: "EachOf" | "OneOf" | "TripleConstraint";
    };
    tripleExprOrRef: {
        kind: "union";
        type: import("./ShexJTypes").tripleExprOrRef;
        typeNames: "tripleExpr" | "tripleExprRef";
    };
    EachOf: {
        kind: "interface";
        type: import("./ShexJTypes").EachOf;
        properties: {
            id: "tripleExprLabel";
            min: "INTEGER";
            max: "INTEGER";
            expressions: "tripleExprOrRef";
            semActs: "SemAct";
            annotations: "Annotation";
        };
    };
    OneOf: {
        kind: "interface";
        type: import("./ShexJTypes").OneOf;
        properties: {
            id: "tripleExprLabel";
            min: "INTEGER";
            max: "INTEGER";
            expressions: "tripleExprOrRef";
            semActs: "SemAct";
            annotations: "Annotation";
        };
    };
    TripleConstraint: {
        kind: "interface";
        type: import("./ShexJTypes").TripleConstraint;
        properties: {
            id: "tripleExprLabel";
            min: "INTEGER";
            max: "INTEGER";
            inverse: "BOOL";
            predicate: "IRIREF";
            valueExpr: "shapeExprOrRef";
            semActs: "SemAct";
            annotations: "Annotation";
        };
    };
    tripleExprRef: {
        kind: "union";
        type: string;
        typeNames: "tripleExprLabel";
    };
    tripleExprLabel: {
        kind: "union";
        type: string;
        typeNames: "IRIREF" | "BNODE";
    };
    SemAct: {
        kind: "interface";
        type: import("./ShexJTypes").SemAct;
        properties: {
            name: "IRIREF";
            code: "STRING";
        };
    };
    Annotation: {
        kind: "interface";
        type: import("./ShexJTypes").Annotation;
        properties: {
            predicate: "IRI";
            object: "objectValue";
        };
    };
    IRIREF: {
        kind: "primitive";
        type: string;
    };
    BNODE: {
        kind: "primitive";
        type: string;
    };
    INTEGER: {
        kind: "primitive";
        type: number;
    };
    STRING: {
        kind: "primitive";
        type: string;
    };
    DECIMAL: {
        kind: "primitive";
        type: number;
    };
    DOUBLE: {
        kind: "primitive";
        type: number;
    };
    LANGTAG: {
        kind: "primitive";
        type: string;
    };
    BOOL: {
        kind: "primitive";
        type: boolean;
    };
    IRI: {
        kind: "primitive";
        type: string;
    };
}>;
