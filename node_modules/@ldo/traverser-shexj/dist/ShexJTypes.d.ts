export {};
export interface Schema {
    type: "Schema";
    "@context"?: "http://www.w3.org/ns/shex.jsonld" | undefined;
    startActs?: SemAct[] | undefined;
    start?: shapeExprOrRef | undefined;
    imports?: IRIREF[] | undefined;
    shapes?: ShapeDecl[] | undefined;
}
export interface semactsAndAnnotations {
    semActs?: SemAct[] | undefined;
    annotations?: Annotation[] | undefined;
}
export interface ShapeDecl {
    type: "ShapeDecl";
    id: shapeDeclLabel;
    abstract?: BOOL | undefined;
    restricts?: shapeExprOrRef[] | undefined;
    shapeExpr: shapeExpr;
}
export type shapeExpr = ShapeOr | ShapeAnd | ShapeNot | NodeConstraint | Shape | ShapeExternal;
export type shapeExprOrRef = shapeExpr | shapeDeclRef;
export interface ShapeOr {
    type: "ShapeOr";
    shapeExprs: shapeExprOrRef[];
}
export interface ShapeAnd {
    type: "ShapeAnd";
    shapeExprs: shapeExprOrRef[];
}
export interface ShapeNot {
    type: "ShapeNot";
    shapeExpr: shapeExprOrRef;
}
export interface ShapeExternal {
    type: "ShapeExternal";
}
export type shapeDeclRef = shapeDeclLabel | ShapeDecl;
export type shapeDeclLabel = IRIREF | BNODE;
export type nodeKind = "iri" | "bnode" | "nonliteral" | "literal";
export interface NodeConstraint extends xsFacets, semactsAndAnnotations {
    type: "NodeConstraint";
    nodeKind?: nodeKind | undefined;
    datatype?: IRIREF | undefined;
    values?: valueSetValue[] | undefined;
}
export interface xsFacets extends stringFacets, numericFacets {
}
export interface stringFacets {
    length?: INTEGER | undefined;
    minlength?: INTEGER | undefined;
    maxlength?: INTEGER | undefined;
    pattern?: STRING | undefined;
    flags?: STRING | undefined;
}
export interface numericFacets {
    mininclusive?: numericLiteral | undefined;
    minexclusive?: numericLiteral | undefined;
    maxinclusive?: numericLiteral | undefined;
    maxexclusive?: numericLiteral | undefined;
    totaldigits?: INTEGER | undefined;
    fractiondigits?: INTEGER | undefined;
}
export type numericLiteral = INTEGER | DECIMAL | DOUBLE;
export type valueSetValue = objectValue | IriStem | IriStemRange | LiteralStem | LiteralStemRange | Language | LanguageStem | LanguageStemRange;
export type objectValue = IRIREF | ObjectLiteral;
export interface ObjectLiteral {
    value: STRING;
    language?: STRING | undefined;
    type?: STRING | undefined;
}
export interface IriStem {
    type: "IriStem";
    stem: IRIREF;
}
export type iriRangeStem = IRIREF | Wildcard;
export type iriRangeExclusion = IRIREF | IriStem;
export interface IriStemRange {
    type: "IriStemRange";
    stem: iriRangeStem;
    exclusions: iriRangeExclusion[];
}
export interface LiteralStem {
    type: "LiteralStem";
    stem: STRING;
}
export type literalRangeStem = string | Wildcard;
export type literalRangeExclusion = string | LiteralStem;
export interface LiteralStemRange {
    type: "LiteralStemRange";
    stem: literalRangeStem;
    exclusions: literalRangeExclusion[];
}
export interface Language {
    type: "Language";
    languageTag: LANGTAG;
}
export interface LanguageStem {
    type: "LanguageStem";
    stem: LANGTAG;
}
export type languageRangeStem = string | Wildcard;
export type languageRangeExclusion = string | LanguageStem;
export interface LanguageStemRange {
    type: "LanguageStemRange";
    stem: languageRangeStem;
    exclusions: languageRangeExclusion[];
}
export interface Wildcard {
    type: "Wildcard";
}
export interface Shape extends semactsAndAnnotations {
    type: "Shape";
    closed?: BOOL | undefined;
    extra?: IRIREF[] | undefined;
    extends?: shapeExprOrRef[];
    expression?: tripleExprOrRef | undefined;
}
export type tripleExpr = EachOf | OneOf | TripleConstraint;
export type tripleExprOrRef = tripleExpr | tripleExprRef;
export interface tripleExprBase extends semactsAndAnnotations {
    id?: tripleExprLabel | undefined;
    min?: INTEGER | undefined;
    max?: INTEGER | undefined;
}
export interface EachOf extends tripleExprBase {
    type: "EachOf";
    expressions: tripleExprOrRef[];
}
export interface OneOf extends tripleExprBase {
    type: "OneOf";
    expressions: tripleExprOrRef[];
}
export interface TripleConstraint extends tripleExprBase {
    type: "TripleConstraint";
    inverse?: BOOL | undefined;
    predicate: IRIREF;
    valueExpr?: shapeExprOrRef | undefined;
}
export type tripleExprRef = tripleExprLabel;
export type tripleExprLabel = IRIREF | BNODE;
export interface SemAct {
    type: "SemAct";
    name: IRIREF;
    code?: STRING | undefined;
}
export interface Annotation {
    type: "Annotation";
    predicate: IRI;
    object: objectValue;
}
export type IRIREF = string;
export type BNODE = string;
export type INTEGER = number;
export type STRING = string;
export type DECIMAL = number;
export type DOUBLE = number;
export type LANGTAG = string;
export type BOOL = boolean;
export type IRI = string;
