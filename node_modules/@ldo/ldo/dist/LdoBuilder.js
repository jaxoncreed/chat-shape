"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LdoBuilder = void 0;
const util_1 = require("./util");
class LdoBuilder {
    constructor(jsonldDatasetProxyBuilder, shapeType) {
        this.jsonldDatasetProxyBuilder = jsonldDatasetProxyBuilder;
        this.shapeType = shapeType;
    }
    fromSubject(subject) {
        return this.jsonldDatasetProxyBuilder.fromSubject((0, util_1.normalizeNodeName)(subject));
    }
    matchSubject(predicate, object, graph) {
        return this.jsonldDatasetProxyBuilder.matchSubject(predicate != undefined ? (0, util_1.normalizeNodeName)(predicate) : undefined, object != undefined ? (0, util_1.normalizeNodeName)(object) : undefined, graph != undefined ? (0, util_1.normalizeNodeName)(graph) : undefined);
    }
    matchObject(subject, predicate, graph) {
        return this.jsonldDatasetProxyBuilder.matchObject(subject != undefined ? (0, util_1.normalizeNodeName)(subject) : undefined, predicate != undefined ? (0, util_1.normalizeNodeName)(predicate) : undefined, graph != undefined ? (0, util_1.normalizeNodeName)(graph) : undefined);
    }
    fromJson(inputData) {
        return this.jsonldDatasetProxyBuilder.fromJson(inputData);
    }
    write(...graphs) {
        return new LdoBuilder(this.jsonldDatasetProxyBuilder.write(...(0, util_1.normalizeNodeNames)(graphs)), this.shapeType);
    }
    setLanguagePreferences(...languageOrdering) {
        return new LdoBuilder(this.jsonldDatasetProxyBuilder.setLanguagePreferences(...languageOrdering), this.shapeType);
    }
}
exports.LdoBuilder = LdoBuilder;
//# sourceMappingURL=LdoBuilder.js.map