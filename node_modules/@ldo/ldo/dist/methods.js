"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toNTriples = exports.toJsonLd = exports.toTurtle = exports.serialize = exports.toSparqlUpdate = exports.getDataset = exports.transactionChanges = exports.commitTransaction = exports.startTransaction = exports.write = exports.setLanguagePreferences = exports.languagesOf = exports.graphOf = void 0;
const jsonld_dataset_proxy_1 = require("@ldo/jsonld-dataset-proxy");
const rdf_utils_1 = require("@ldo/rdf-utils");
const util_1 = require("./util");
const jsonld_dataset_proxy_2 = require("@ldo/jsonld-dataset-proxy");
exports.graphOf = jsonld_dataset_proxy_2.graphOf;
exports.languagesOf = jsonld_dataset_proxy_2.languagesOf;
exports.setLanguagePreferences = jsonld_dataset_proxy_2.setLanguagePreferences;
function write(...graphs) {
    return (0, jsonld_dataset_proxy_1.write)(...(0, util_1.normalizeNodeNames)(graphs));
}
exports.write = write;
function startTransaction(ldo) {
    const proxy = (0, jsonld_dataset_proxy_1.getProxyFromObject)(ldo);
    const dataset = proxy[jsonld_dataset_proxy_1._getUnderlyingDataset];
    if (!(0, util_1.canDatasetStartTransaction)(dataset)) {
        throw new Error("Object is not transactable.");
    }
    proxy[jsonld_dataset_proxy_1._proxyContext] = proxy[jsonld_dataset_proxy_1._proxyContext].duplicate({
        dataset: dataset.startTransaction(),
        state: { parentDataset: dataset },
    });
}
exports.startTransaction = startTransaction;
function commitTransaction(ldo) {
    const [dataset, proxy] = (0, util_1.getTransactionalDatasetFromLdo)(ldo);
    dataset.commit();
    proxy[jsonld_dataset_proxy_1._proxyContext] = proxy[jsonld_dataset_proxy_1._proxyContext].duplicate({
        dataset: proxy[jsonld_dataset_proxy_1._proxyContext].state
            .parentDataset,
    });
}
exports.commitTransaction = commitTransaction;
function transactionChanges(ldo) {
    const [dataset] = (0, util_1.getTransactionalDatasetFromLdo)(ldo);
    return dataset.getChanges();
}
exports.transactionChanges = transactionChanges;
function getDataset(ldo) {
    const proxy = (0, jsonld_dataset_proxy_1.getProxyFromObject)(ldo);
    return proxy[jsonld_dataset_proxy_1._getUnderlyingDataset];
}
exports.getDataset = getDataset;
async function toSparqlUpdate(ldo) {
    const [dataset] = (0, util_1.getTransactionalDatasetFromLdo)(ldo);
    const changes = dataset.getChanges();
    return (0, rdf_utils_1.changesToSparqlUpdate)(changes);
}
exports.toSparqlUpdate = toSparqlUpdate;
async function serialize(ldo, options) {
    const dataset = (0, jsonld_dataset_proxy_1.getProxyFromObject)(ldo)[jsonld_dataset_proxy_1._getUnderlyingDataset];
    return (0, rdf_utils_1.datasetToString)(dataset, options);
}
exports.serialize = serialize;
async function toTurtle(ldo) {
    const dataset = (0, jsonld_dataset_proxy_1.getProxyFromObject)(ldo)[jsonld_dataset_proxy_1._getUnderlyingDataset];
    return (0, rdf_utils_1.datasetToString)(dataset, {});
}
exports.toTurtle = toTurtle;
async function toJsonLd(_ldo) {
    throw new Error("Not Implemented");
}
exports.toJsonLd = toJsonLd;
async function toNTriples(ldo) {
    const dataset = (0, jsonld_dataset_proxy_1.getProxyFromObject)(ldo)[jsonld_dataset_proxy_1._getUnderlyingDataset];
    return (0, rdf_utils_1.datasetToString)(dataset, { format: "N-Triples" });
}
exports.toNTriples = toNTriples;
//# sourceMappingURL=methods.js.map