"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTransactionalDatasetFromLdo = exports.isTransactionalDataset = exports.canDatasetStartTransaction = exports.normalizeNodeNames = exports.normalizeNodeName = void 0;
const data_model_1 = require("@rdfjs/data-model");
const jsonld_dataset_proxy_1 = require("@ldo/jsonld-dataset-proxy");
function normalizeNodeName(input) {
    return (typeof input === "string" ? (0, data_model_1.namedNode)(input) : input);
}
exports.normalizeNodeName = normalizeNodeName;
function normalizeNodeNames(inputs) {
    return inputs.map((input) => normalizeNodeName(input));
}
exports.normalizeNodeNames = normalizeNodeNames;
function canDatasetStartTransaction(dataset) {
    return (typeof dataset.startTransaction === "function");
}
exports.canDatasetStartTransaction = canDatasetStartTransaction;
function isTransactionalDataset(dataset) {
    return typeof dataset.commit === "function";
}
exports.isTransactionalDataset = isTransactionalDataset;
function getTransactionalDatasetFromLdo(ldo) {
    const proxy = (0, jsonld_dataset_proxy_1.getProxyFromObject)(ldo);
    const dataset = proxy[jsonld_dataset_proxy_1._getUnderlyingDataset];
    if (!isTransactionalDataset(dataset) ||
        !proxy[jsonld_dataset_proxy_1._proxyContext].state.parentDataset) {
        throw new Error("Object is not currently in a transaction");
    }
    return [dataset, proxy];
}
exports.getTransactionalDatasetFromLdo = getTransactionalDatasetFromLdo;
//# sourceMappingURL=util.js.map