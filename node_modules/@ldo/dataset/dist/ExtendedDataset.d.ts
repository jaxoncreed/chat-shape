import { type DatasetCore, type Dataset, type BaseQuad, type Stream, type Term, type DatasetCoreFactory } from "@rdfjs/types";
export default class ExtendedDataset<InAndOutQuad extends BaseQuad = BaseQuad> implements Dataset<InAndOutQuad, InAndOutQuad> {
    protected dataset: DatasetCore<InAndOutQuad, InAndOutQuad>;
    protected datasetCoreFactory: DatasetCoreFactory<InAndOutQuad, InAndOutQuad>;
    constructor(dataset: DatasetCore<InAndOutQuad, InAndOutQuad>, datasetFactory: DatasetCoreFactory<InAndOutQuad, InAndOutQuad>);
    private createBlankDataset;
    addAll(quads: InAndOutQuad[] | Dataset<InAndOutQuad>): this;
    contains(other: Dataset<InAndOutQuad>): boolean;
    deleteMatches(subject?: Term, predicate?: Term, object?: Term, graph?: Term): this;
    difference(other: DatasetCore<InAndOutQuad>): Dataset<InAndOutQuad, InAndOutQuad>;
    equals(other: Dataset<InAndOutQuad, InAndOutQuad>): boolean;
    every(iteratee: (quad: InAndOutQuad, dataset: this) => boolean): boolean;
    filter(iteratee: (quad: InAndOutQuad, dataset: this) => boolean): Dataset<InAndOutQuad, InAndOutQuad>;
    forEach(iteratee: (quad: InAndOutQuad, dataset: this) => void): void;
    import(stream: Stream<InAndOutQuad>): Promise<this>;
    intersection(other: Dataset<InAndOutQuad, InAndOutQuad>): Dataset<InAndOutQuad, InAndOutQuad>;
    map(iteratee: (quad: InAndOutQuad, dataset: this) => InAndOutQuad): Dataset<InAndOutQuad, InAndOutQuad>;
    reduce<A = unknown>(iteratee: (accumulator: A, quad: InAndOutQuad, dataset: this) => A, initialValue?: A): A;
    some(iteratee: (quad: InAndOutQuad, dataset: this) => boolean): boolean;
    toArray(): InAndOutQuad[];
    toCanonical(): string;
    toStream(): Stream<InAndOutQuad>;
    toString(): string;
    union(other: Dataset<InAndOutQuad, InAndOutQuad>): Dataset<InAndOutQuad, InAndOutQuad>;
    match(subject?: Term | null, predicate?: Term | null, object?: Term | null, graph?: Term | null): Dataset<InAndOutQuad, InAndOutQuad>;
    get size(): number;
    add(quad: InAndOutQuad): this;
    delete(quad: InAndOutQuad): this;
    has(quad: InAndOutQuad): boolean;
    [Symbol.iterator](): Iterator<InAndOutQuad, InAndOutQuad, undefined>;
}
