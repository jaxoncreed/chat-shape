"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.json2ObjectGraph = void 0;
var jsonld_context_parser_1 = require("jsonld-context-parser");
var uuid_1 = require("uuid");
var contextParser = new jsonld_context_parser_1.ContextParser();
function isObject(value) {
    return typeof value === "object" && !Array.isArray(value) && value !== null;
}
/**
 * Helper function to set the proper tripleArcs values
 */
function setTripleArcs(tripleArcs, subjectId, predicateId, objectId) {
    if (!tripleArcs[subjectId]) {
        tripleArcs[subjectId] = {
            scopedContexts: [],
            predicates: {},
        };
    }
    if (!tripleArcs[subjectId].predicates[predicateId]) {
        tripleArcs[subjectId].predicates[predicateId] = [];
    }
    tripleArcs[subjectId].predicates[predicateId].push(objectId);
}
/**
 * Helper function to set scopedContext on tripleArcs
 */
function setScopedContext(tripleArcs, subjectId, scopedContext) {
    if (!tripleArcs[subjectId]) {
        tripleArcs[subjectId] = {
            scopedContexts: [],
            predicates: {},
        };
    }
    if (scopedContext) {
        tripleArcs[subjectId].scopedContexts.push(scopedContext);
    }
}
/**
 * Combines multiple contexts together
 */
function combineContexts(contexts) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, contextParser.parse(contexts)];
                case 1: return [2 /*return*/, (_a.sent()).getContextRaw()];
            }
        });
    });
}
/**
 * Recursively traverses an object to fill out the idMap and tripleArcs
 * @param object The object to traverse
 * @param idMap A map between the object Id and a collection of objects representing it
 * @param tripleArcs A collection of all the arcs between objects
 * @param parentIdPredicates The predicates that are mapped to @ids as defined by the context
 * @return the id of the given Node
 */
function traverseNodesForIdsAndLeafs(object, idMap, tripleArcs, parentScopedContext, 
// All predicates that are made of Ids
parentIdPredicates) {
    return __awaiter(this, void 0, void 0, function () {
        var scopedContext, idPredicates, objectId;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    scopedContext = parentScopedContext;
                    idPredicates = parentIdPredicates || new Set();
                    if (!object["@context"]) return [3 /*break*/, 4];
                    return [4 /*yield*/, contextParser.parse(object["@context"])];
                case 1:
                    scopedContext =
                        // The typings for these two libraries disagree, but they are correct
                        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                        // @ts-ignore
                        (_a.sent()).getContextRaw();
                    if (!parentScopedContext) return [3 /*break*/, 3];
                    return [4 /*yield*/, combineContexts([
                            parentScopedContext,
                            scopedContext,
                        ])];
                case 2:
                    scopedContext = _a.sent();
                    _a.label = 3;
                case 3:
                    Object.entries(scopedContext).forEach(function (_a) {
                        var _b = __read(_a, 2), key = _b[0], value = _b[1];
                        if (key.charAt(0) === "@")
                            return;
                        if (isObject(value) && value["@type"] && value["@type"] === "@id") {
                            idPredicates.add(key);
                        }
                        else if (idPredicates.has(key)) {
                            idPredicates.delete(key);
                        }
                    });
                    _a.label = 4;
                case 4:
                    objectId = object["@id"] || (0, uuid_1.v4)();
                    if (!idMap[objectId]) {
                        idMap[objectId] = [];
                    }
                    idMap[objectId].push(object);
                    // Traverse the keys of this Object
                    return [4 /*yield*/, Promise.all(Object.entries(object).map(function (_a) {
                            var _b = __read(_a, 2), key = _b[0], value = _b[1];
                            return __awaiter(_this, void 0, void 0, function () {
                                var graph, valueId;
                                var _this = this;
                                return __generator(this, function (_c) {
                                    switch (_c.label) {
                                        case 0:
                                            if (!(key === "@graph")) return [3 /*break*/, 2];
                                            graph = (Array.isArray(value) ? value : [value]);
                                            return [4 /*yield*/, Promise.all(graph.map(function (graphValue) { return __awaiter(_this, void 0, void 0, function () {
                                                    return __generator(this, function (_a) {
                                                        switch (_a.label) {
                                                            case 0: return [4 /*yield*/, traverseNodesForIdsAndLeafs(graphValue, idMap, tripleArcs, scopedContext, idPredicates)];
                                                            case 1:
                                                                _a.sent();
                                                                return [2 /*return*/];
                                                        }
                                                    });
                                                }); }))];
                                        case 1:
                                            _c.sent();
                                            _c.label = 2;
                                        case 2:
                                            if (key.charAt(0) === "@")
                                                return [2 /*return*/];
                                            if (!isObject(value)) return [3 /*break*/, 4];
                                            return [4 /*yield*/, traverseNodesForIdsAndLeafs(value, idMap, tripleArcs, scopedContext, idPredicates)];
                                        case 3:
                                            valueId = _c.sent();
                                            setTripleArcs(tripleArcs, objectId, key, valueId);
                                            return [3 /*break*/, 7];
                                        case 4:
                                            if (!Array.isArray(value)) return [3 /*break*/, 6];
                                            return [4 /*yield*/, Promise.all(value.map(function (arrValue) { return __awaiter(_this, void 0, void 0, function () {
                                                    var valueId;
                                                    return __generator(this, function (_a) {
                                                        switch (_a.label) {
                                                            case 0:
                                                                if (!isObject(arrValue)) return [3 /*break*/, 2];
                                                                return [4 /*yield*/, traverseNodesForIdsAndLeafs(arrValue, idMap, tripleArcs, scopedContext, idPredicates)];
                                                            case 1:
                                                                valueId = _a.sent();
                                                                setTripleArcs(tripleArcs, objectId, key, valueId);
                                                                return [3 /*break*/, 3];
                                                            case 2:
                                                                if (typeof arrValue === "string" && idPredicates.has(key)) {
                                                                    setTripleArcs(tripleArcs, objectId, key, arrValue);
                                                                }
                                                                _a.label = 3;
                                                            case 3: return [2 /*return*/];
                                                        }
                                                    });
                                                }); }))];
                                        case 5:
                                            _c.sent();
                                            return [3 /*break*/, 7];
                                        case 6:
                                            if (typeof value === "string" && idPredicates.has(key)) {
                                                setTripleArcs(tripleArcs, objectId, key, value);
                                            }
                                            _c.label = 7;
                                        case 7: return [2 /*return*/];
                                    }
                                });
                            });
                        }))];
                case 5:
                    // Traverse the keys of this Object
                    _a.sent();
                    setScopedContext(tripleArcs, objectId, scopedContext);
                    return [2 /*return*/, objectId];
            }
        });
    });
}
/**
 * Converts any JSON-LD object into object literals linked in a graph
 * @param jsonLd The JSON-LD document
 * @param node The id of the node that should be returned as the root value
 */
function json2ObjectGraph(jsonLd, node) {
    return __awaiter(this, void 0, void 0, function () {
        var jsonLdClone, idMap, tripleArcs, consolodatedIdMap, nodeToReturn;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    jsonLdClone = JSON.parse(JSON.stringify(jsonLd));
                    idMap = {};
                    tripleArcs = {};
                    return [4 /*yield*/, traverseNodesForIdsAndLeafs(jsonLdClone, idMap, tripleArcs)];
                case 1:
                    _a.sent();
                    consolodatedIdMap = {};
                    Object.entries(idMap).forEach(function (_a) {
                        var _b = __read(_a, 2), key = _b[0], value = _b[1];
                        consolodatedIdMap[key] = value.reduce(function (agg, newNode) {
                            return __assign(__assign({}, agg), newNode);
                        }, {});
                    });
                    nodeToReturn = consolodatedIdMap[node];
                    if (!nodeToReturn) {
                        throw new Error("Node \"".concat(node, "\" is not in the graph."));
                    }
                    // Link the triple arcs
                    return [4 /*yield*/, Promise.all(Object.entries(tripleArcs).map(function (_a) {
                            var _b = __read(_a, 2), subjectId = _b[0], subjectInfo = _b[1];
                            return __awaiter(_this, void 0, void 0, function () {
                                var subject, _c, _d;
                                return __generator(this, function (_e) {
                                    switch (_e.label) {
                                        case 0:
                                            subject = consolodatedIdMap[subjectId];
                                            if (!(subjectInfo.scopedContexts.length > 0)) return [3 /*break*/, 2];
                                            // Again, these two library types do not work together, but it's actual fine.
                                            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                                            // @ts-ignore
                                            _c = subject;
                                            _d = "@context";
                                            return [4 /*yield*/, combineContexts(subjectInfo.scopedContexts)];
                                        case 1:
                                            // Again, these two library types do not work together, but it's actual fine.
                                            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                                            // @ts-ignore
                                            _c[_d] = _e.sent();
                                            _e.label = 2;
                                        case 2:
                                            // Build the object links
                                            Object.entries(subjectInfo.predicates).forEach(function (_a) {
                                                var _b = __read(_a, 2), predicate = _b[0], objectIds = _b[1];
                                                if (objectIds.length === 1 &&
                                                    // Is not a container predicate
                                                    !(subject["@context"] &&
                                                        subject["@context"][predicate] &&
                                                        subject["@context"][predicate]["@container"])) {
                                                    subject[predicate] =
                                                        consolodatedIdMap[objectIds[0]] || objectIds[0];
                                                }
                                                else {
                                                    subject[predicate] = objectIds.map(function (objectId) { return consolodatedIdMap[objectId] || objectId; });
                                                }
                                            });
                                            return [2 /*return*/];
                                    }
                                });
                            });
                        }))];
                case 2:
                    // Link the triple arcs
                    _a.sent();
                    return [2 /*return*/, nodeToReturn];
            }
        });
    });
}
exports.json2ObjectGraph = json2ObjectGraph;
