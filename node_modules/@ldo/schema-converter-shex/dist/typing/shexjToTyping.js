"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.shexjToTyping = void 0;
const JsonLdContextBuilder_1 = require("../context/JsonLdContextBuilder");
const ShexJContextVisitor_1 = require("../context/ShexJContextVisitor");
const jsonld2graphobject_1 = require("jsonld2graphobject");
const ShexJTypingTransformer_1 = require("./ShexJTypingTransformer");
const dom = __importStar(require("dts-dom"));
async function shexjToTyping(shexj) {
    const processedShexj = (await (0, jsonld2graphobject_1.jsonld2graphobject)({
        ...shexj,
        "@id": "SCHEMA",
        "@context": "http://www.w3.org/ns/shex.jsonld",
    }, "SCHEMA"));
    const jsonLdContextBuilder = new JsonLdContextBuilder_1.JsonLdContextBuilder();
    await ShexJContextVisitor_1.ShexJNameVisitor.visit(processedShexj, "Schema", jsonLdContextBuilder);
    const declarations = await ShexJTypingTransformer_1.ShexJTypingTransformer.transform(processedShexj, "Schema", {
        getNameFromIri: jsonLdContextBuilder.getNameFromIri.bind(jsonLdContextBuilder),
    });
    const typings = declarations.map((declaration) => {
        return {
            typingString: dom
                .emit(declaration, {
                rootFlags: dom.ContextFlags.InAmbientNamespace,
            })
                .replace(/\r\n/g, "\n"),
            dts: declaration,
        };
    });
    const typingsString = `import {ContextDefinition} from "jsonld"\n\n` +
        typings.map((typing) => `export ${typing.typingString}`).join("");
    const typeingReturn = {
        typingsString,
        typings,
    };
    return [typeingReturn, jsonLdContextBuilder.generateJsonldContext()];
}
exports.shexjToTyping = shexjToTyping;
//# sourceMappingURL=shexjToTyping.js.map