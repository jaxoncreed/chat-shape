"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.dedupeObjectTypeMembers = void 0;
const dom = __importStar(require("dts-dom"));
function dedupeObjectTypeMembers(memberList) {
    const properties = {};
    memberList.forEach((expression) => {
        const propertyDeclaration = expression;
        if (properties[propertyDeclaration.name]) {
            const oldPropertyDeclaration = properties[propertyDeclaration.name];
            const oldPropertyTypeAsArray = oldPropertyDeclaration.type;
            const oldProeprtyType = oldPropertyTypeAsArray.kind === "array"
                ? oldPropertyTypeAsArray.type
                : oldPropertyDeclaration.type;
            const propertyTypeAsArray = propertyDeclaration.type;
            const propertyType = propertyTypeAsArray.kind === "array"
                ? propertyTypeAsArray.type
                : propertyDeclaration.type;
            const isOptional = propertyDeclaration.flags === dom.DeclarationFlags.Optional ||
                oldPropertyDeclaration.flags === dom.DeclarationFlags.Optional;
            properties[propertyDeclaration.name] = dom.create.property(propertyDeclaration.name, dom.type.array(dom.create.union([oldProeprtyType, propertyType])), isOptional ? dom.DeclarationFlags.Optional : dom.DeclarationFlags.None);
            properties[propertyDeclaration.name].jsDocComment =
                oldPropertyDeclaration.jsDocComment && propertyDeclaration.jsDocComment
                    ? `${oldPropertyDeclaration.jsDocComment} | ${propertyDeclaration.jsDocComment}`
                    : oldPropertyDeclaration.jsDocComment ||
                        propertyDeclaration.jsDocComment;
        }
        else {
            properties[propertyDeclaration.name] = propertyDeclaration;
        }
    });
    return Object.values(properties);
}
exports.dedupeObjectTypeMembers = dedupeObjectTypeMembers;
//# sourceMappingURL=dedupeObjectTypeMembers.js.map