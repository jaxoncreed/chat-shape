"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonLdContextBuilder = exports.isJsonLdContextBuilder = exports.toCamelCase = exports.nameFromObject = exports.iriToName = void 0;
function iriToName(iri) {
    try {
        const url = new URL(iri);
        if (url.hash) {
            return url.hash.slice(1);
        }
        else {
            const splitPathname = url.pathname.split("/");
            return splitPathname[splitPathname.length - 1];
        }
    }
    catch (err) {
        return iri;
    }
}
exports.iriToName = iriToName;
function nameFromObject(obj) {
    const labelAnnotationObject = obj.annotations?.find((annotation) => annotation.predicate === "http://www.w3.org/2000/01/rdf-schema#label")?.object;
    if (labelAnnotationObject && typeof labelAnnotationObject === "string") {
        return toCamelCase(iriToName(labelAnnotationObject));
    }
    else if (labelAnnotationObject &&
        typeof labelAnnotationObject !== "string") {
        return toCamelCase(labelAnnotationObject.value);
    }
    else if (obj.id) {
        return toCamelCase(iriToName(obj.id));
    }
}
exports.nameFromObject = nameFromObject;
function toCamelCase(text) {
    return text
        .replace(/([-_ ]){1,}/g, " ")
        .split(/[-_ ]/)
        .reduce((cur, acc) => {
        return cur + acc[0].toUpperCase() + acc.substring(1);
    });
}
exports.toCamelCase = toCamelCase;
function isJsonLdContextBuilder(item) {
    return !!(typeof item === "object" && item instanceof JsonLdContextBuilder);
}
exports.isJsonLdContextBuilder = isJsonLdContextBuilder;
class JsonLdContextBuilder {
    constructor() {
        this.iriAnnotations = {};
        this.iriTypes = {};
    }
    getRelevantBuilder(rdfType) {
        if (!rdfType)
            return this;
        if (!this.iriTypes[rdfType] ||
            !isJsonLdContextBuilder(this.iriTypes[rdfType])) {
            this.iriTypes[rdfType] = new JsonLdContextBuilder();
        }
        return this.iriTypes[rdfType];
    }
    addSubject(iri, rdfType, annotations) {
        const relevantBuilder = this.getRelevantBuilder(rdfType);
        if (!relevantBuilder.iriAnnotations[iri]) {
            relevantBuilder.iriAnnotations[iri] = [];
        }
        if (annotations && annotations.length > 0) {
            relevantBuilder.iriAnnotations[iri].push(...annotations);
        }
    }
    addPredicate(iri, expandedTermDefinition, isContainer, rdfType, annotations) {
        const relevantBuilder = this.getRelevantBuilder(rdfType);
        relevantBuilder.addSubject(iri, undefined, annotations);
        if (!relevantBuilder.iriTypes[iri]) {
            relevantBuilder.iriTypes[iri] = expandedTermDefinition;
            if (isContainer) {
                relevantBuilder.iriTypes[iri]["@isCollection"] = true;
            }
        }
        else {
            const curDef = relevantBuilder.iriTypes[iri];
            const newDef = expandedTermDefinition;
            if (isContainer) {
                curDef["@isCollection"] = true;
            }
            if (curDef["@type"] && newDef["@type"]) {
                if (Array.isArray(curDef["@type"]) &&
                    !curDef["@type"].includes(newDef["@type"])) {
                    curDef["@type"].push(newDef["@type"]);
                }
                else if (typeof curDef["@type"] === "string" &&
                    curDef["@type"] !== newDef["@type"]) {
                    curDef["@type"] = [curDef["@type"], newDef["@type"]];
                }
            }
        }
    }
    generateNames() {
        const generatedNames = {};
        const claimedNames = new Set();
        Object.entries(this.iriAnnotations).forEach(([iri, annotations]) => {
            let potentialName;
            if (annotations.length > 0) {
                const labelAnnotationObject = annotations.find((annotation) => annotation.predicate ===
                    "http://www.w3.org/2000/01/rdf-schema#label")?.object;
                if (labelAnnotationObject &&
                    typeof labelAnnotationObject === "string") {
                    potentialName = toCamelCase(iriToName(labelAnnotationObject));
                }
                else if (labelAnnotationObject &&
                    typeof labelAnnotationObject !== "string") {
                    potentialName = toCamelCase(labelAnnotationObject.value);
                }
            }
            if (!potentialName) {
                potentialName = toCamelCase(iriToName(iri));
            }
            if (claimedNames.has(potentialName)) {
                let i = 2;
                let newName;
                do {
                    if (!claimedNames.has(`${potentialName}${i}`)) {
                        newName = `${potentialName}${i}`;
                    }
                    i++;
                } while (!newName);
                potentialName = newName;
            }
            claimedNames.add(potentialName);
            generatedNames[iri] = potentialName;
        });
        return generatedNames;
    }
    getNameFromIri(iri, rdfType) {
        const relevantBuilder = this.getRelevantBuilder(rdfType);
        if (!relevantBuilder.generatedNames) {
            relevantBuilder.generatedNames = relevantBuilder.generateNames();
        }
        if (relevantBuilder.generatedNames[iri]) {
            return relevantBuilder.generatedNames[iri];
        }
        else {
            return iri;
        }
    }
    generateJsonldContext() {
        const contextDefnition = {};
        const namesMap = this.generateNames();
        Object.entries(namesMap).forEach(([iri, name]) => {
            if (this.iriTypes[iri]) {
                let subContext = {
                    "@id": iri === "http://www.w3.org/1999/02/22-rdf-syntax-ns#type"
                        ? "@type"
                        : iri,
                };
                if (isJsonLdContextBuilder(this.iriTypes[iri])) {
                    subContext["@context"] = this.iriTypes[iri].generateJsonldContext();
                }
                else {
                    subContext = {
                        ...subContext,
                        ...this.iriTypes[iri],
                    };
                }
                contextDefnition[name] = subContext;
            }
            else {
                contextDefnition[name] = iri;
            }
        });
        return contextDefnition;
    }
}
exports.JsonLdContextBuilder = JsonLdContextBuilder;
//# sourceMappingURL=JsonLdContextBuilder.js.map