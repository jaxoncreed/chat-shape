import type { Annotation } from "shexj";
import type { ExpandedTermDefinition } from "jsonld";
import type { LdoJsonldContext } from "@ldo/jsonld-dataset-proxy";
export declare function iriToName(iri: string): string;
export declare function nameFromObject(obj: {
    id?: string;
    annotations?: Annotation[];
}): string | undefined;
export declare function toCamelCase(text: string): string;
export declare function isJsonLdContextBuilder(item: ExpandedTermDefinition | JsonLdContextBuilder): item is JsonLdContextBuilder;
export declare class JsonLdContextBuilder {
    protected iriAnnotations: Record<string, Annotation[]>;
    protected iriTypes: Record<string, ExpandedTermDefinition | JsonLdContextBuilder>;
    protected generatedNames: Record<string, string> | undefined;
    private getRelevantBuilder;
    addSubject(iri: string, rdfType?: string, annotations?: Annotation[]): void;
    addPredicate(iri: string, expandedTermDefinition: ExpandedTermDefinition, isContainer: boolean, rdfType?: string, annotations?: Annotation[]): void;
    generateNames(): Record<string, string>;
    getNameFromIri(iri: string, rdfType?: string): string;
    generateJsonldContext(): LdoJsonldContext;
}
