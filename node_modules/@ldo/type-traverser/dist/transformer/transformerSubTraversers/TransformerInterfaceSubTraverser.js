"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformerInterfaceSubTraverser = void 0;
const TransformerParentSubTraverser_1 = require("./TransformerParentSubTraverser");
async function transformerInterfaceSubTraverser(item, itemTypeName, globals) {
    const { traverserDefinition, transformers, circularDependencyAwaiter, executingPromises, superPromise, } = globals;
    const resolveSuperPromise = superPromise.add();
    return new Promise(async (resolve, reject) => {
        try {
            const definition = traverserDefinition[itemTypeName];
            const transformer = transformers[itemTypeName];
            const transformedObject = await transformer.transformer(item, async () => {
                const propertiesReturn = Object.fromEntries(await Promise.all(Object.entries(definition.properties).map(async ([propertyName]) => {
                    const originalObject = item[propertyName];
                    const originalPropertyDefinition = definition.properties[propertyName];
                    const transformedProperty = await transformer.properties[propertyName](originalObject, async () => {
                        if (originalObject === undefined) {
                            return undefined;
                        }
                        else if (Array.isArray(originalObject)) {
                            return Promise.all(originalObject.map(async (subObject) => {
                                const onResolve = circularDependencyAwaiter.add(item, itemTypeName, subObject, originalPropertyDefinition, executingPromises);
                                const toReturn = await (0, TransformerParentSubTraverser_1.transformerParentSubTraverser)(subObject, originalPropertyDefinition, globals);
                                onResolve();
                                return toReturn;
                            }));
                        }
                        else {
                            const onResolve = circularDependencyAwaiter.add(item, itemTypeName, originalObject, originalPropertyDefinition, executingPromises);
                            const toReturn = await (0, TransformerParentSubTraverser_1.transformerParentSubTraverser)(originalObject, originalPropertyDefinition, globals);
                            onResolve();
                            return toReturn;
                        }
                    }, globals.instanceGraph.getNodeFor(item, itemTypeName), globals.context);
                    return [propertyName, transformedProperty];
                })));
                return propertiesReturn;
            }, (input) => {
                resolve(input);
            }, globals.instanceGraph.getNodeFor(item, itemTypeName), globals.context);
            resolve(transformedObject);
            resolveSuperPromise();
        }
        catch (err) {
            reject(err);
            resolveSuperPromise(err);
        }
    });
}
exports.transformerInterfaceSubTraverser = transformerInterfaceSubTraverser;
//# sourceMappingURL=TransformerInterfaceSubTraverser.js.map