"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultiMap = void 0;
class MultiMap {
    constructor() {
        this.map = new Map();
        this.internalSize = 0;
    }
    get(key1, key2) {
        const firstValue = this.map.get(key1);
        if (!firstValue) {
            return undefined;
        }
        return firstValue.get(key2);
    }
    set(key1, key2, value) {
        let nestedMap = this.map.get(key1);
        if (!nestedMap) {
            nestedMap = new Map();
            this.map.set(key1, nestedMap);
        }
        if (!nestedMap.has(key2)) {
            this.internalSize++;
        }
        nestedMap.set(key2, value);
    }
    delete(key1, key2) {
        const nestedMap = this.map.get(key1);
        if (!nestedMap) {
            return;
        }
        if (nestedMap.has(key2)) {
            this.internalSize--;
        }
        nestedMap.delete(key2);
        if (nestedMap.size === 0) {
            this.map.delete(key1);
        }
    }
    has(key1, key2) {
        const firstValue = this.map.get(key1);
        if (!firstValue) {
            return false;
        }
        return firstValue.has(key2);
    }
    toString(key1Transformer = (key) => key, key2Transformer = (key) => key, valueTransformer = (value) => value) {
        let str = "";
        Array.from(this.map.entries()).forEach(([key1, value1]) => {
            Array.from(value1.entries()).forEach(([key2, value2]) => {
                str += `  [${key1Transformer(key1)}, ${key2Transformer(key2)}] => ${valueTransformer(value2)}\n`;
            });
        });
        return str;
    }
    get size() {
        return this.internalSize;
    }
}
exports.MultiMap = MultiMap;
//# sourceMappingURL=MultiMap.js.map