"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Visitor = void 0;
const InstanceGraph_1 = require("../instanceGraph/InstanceGraph");
const MultiSet_1 = require("../transformer/transformerSubTraversers/util/MultiSet");
const VisitorParentSubTraverser_1 = require("./visitorSubTraversers/VisitorParentSubTraverser");
class Visitor {
    constructor(traverserDefinition, visitors) {
        this.traverserDefinition = traverserDefinition;
        this.visitors = this.applyDefaultVisitors(visitors);
    }
    applyDefaultInterfaceVisitorProperties(typeName, typePropertiesInput) {
        return Object.keys(this.traverserDefinition[typeName]
            .properties).reduce((agg, key) => {
            if (typePropertiesInput && typePropertiesInput[key]) {
                agg[key] = typePropertiesInput[key];
            }
            else {
                agg[key] = () => {
                    return;
                };
            }
            return agg;
        }, {});
    }
    applyDefaultInterfaceVisitor(typeName, typeInput) {
        if (!typeInput) {
            return {
                visitor: async () => {
                    return;
                },
                properties: this.applyDefaultInterfaceVisitorProperties(typeName, {}),
            };
        }
        return {
            visitor: typeInput.visitor,
            properties: this.applyDefaultInterfaceVisitorProperties(typeName, typeInput.properties),
        };
    }
    applyDefaultUnionVisitor(typeInput) {
        if (!typeInput) {
            return async () => {
                return;
            };
        }
        return typeInput;
    }
    applyDefaultPrimitiveVisitor(typeInput) {
        if (!typeInput) {
            return async () => {
                return;
            };
        }
        return typeInput;
    }
    applyDefaultVisitors(inputVisitors) {
        const finalVisitors = {};
        Object.keys(this.traverserDefinition).forEach((typeName) => {
            if (this.traverserDefinition[typeName].kind === "interface") {
                finalVisitors[typeName] = this.applyDefaultInterfaceVisitor(typeName, inputVisitors[typeName]);
            }
            else if (this.traverserDefinition[typeName].kind === "union") {
                finalVisitors[typeName] = this.applyDefaultUnionVisitor(inputVisitors[typeName]);
            }
            else if (this.traverserDefinition[typeName].kind === "primitive") {
                finalVisitors[typeName] = this.applyDefaultPrimitiveVisitor(inputVisitors[typeName]);
            }
        });
        return finalVisitors;
    }
    async visit(item, itemTypeName, context) {
        const instanceGraph = new InstanceGraph_1.InstanceGraph(this.traverserDefinition);
        instanceGraph.getNodeFor(item, itemTypeName);
        const toReturn = await (0, VisitorParentSubTraverser_1.visitorParentSubTraverser)(item, itemTypeName, {
            traverserDefinition: this.traverserDefinition,
            visitors: this.visitors,
            visitedObjects: new MultiSet_1.MultiSet(),
            instanceGraph,
            context,
        });
        return toReturn;
    }
}
exports.Visitor = Visitor;
//# sourceMappingURL=Visitor.js.map