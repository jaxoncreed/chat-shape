import type { TraverserDefinition } from "../..";
import type { ParentIdentifiers } from "../../instanceGraph/ReverseRelationshipTypes";
import type { TraverserTypes } from "../../traverser/TraverserTypes";
import type { InstanceGraph } from "../InstanceGraph";
import type { InstanceNodeFor } from "./createInstanceNodeFor";
export declare abstract class InstanceNode<Types extends TraverserTypes<any>, TypeName extends keyof Types, Type extends Types[TypeName]> {
    readonly graph: InstanceGraph<Types>;
    readonly instance: Type["type"];
    readonly typeName: TypeName;
    protected readonly parents: Record<string, Set<InstanceNodeFor<Types, ParentIdentifiers<Types, TypeName>[0]>>>;
    constructor(graph: InstanceGraph<Types>, instance: Type["type"], typeName: TypeName);
    private getParentKey;
    _setParent<Identifiers extends ParentIdentifiers<Types, TypeName>>(identifiers: Identifiers, parentNode: InstanceNodeFor<Types, Identifiers[0]>): void;
    parent<Identifiers extends ParentIdentifiers<Types, TypeName>>(...identifiers: Identifiers): InstanceNodeFor<Types, Identifiers[0]>[];
    allParents(): InstanceNodeFor<Types, ParentIdentifiers<Types, TypeName>[0]>[];
    abstract _setChild(...props: any[]): void;
    abstract child(...props: any[]): any;
    abstract allChildren(): InstanceNodeFor<Types, any>[];
    get traverserDefinition(): TraverserDefinition<Types, TypeName, Type>;
    abstract _recursivelyBuildChildren(): void;
}
