import type { ApplyArrayAndUndefined } from "../../transformer/TransformerReturnTypesDefaults";
import type { InterfaceType, TraverserTypes } from "../../traverser/TraverserTypes";
import type { InstanceGraph } from "../InstanceGraph";
import type { InstanceNodeFor } from "./createInstanceNodeFor";
import { InstanceNode } from "./InstanceNode";
export type InterfacePropertyNode<Types extends TraverserTypes<any>, Type extends InterfaceType<keyof Types>, PropertyName extends keyof Type["properties"]> = ApplyArrayAndUndefined<Type["type"][PropertyName], InstanceNodeFor<Types, Type["properties"][PropertyName]>>;
export declare class InterfaceInstanceNode<Types extends TraverserTypes<any>, TypeName extends keyof Types, Type extends InterfaceType<keyof Types> & Types[TypeName]> extends InstanceNode<Types, TypeName, Type> {
    private children;
    constructor(graph: InstanceGraph<Types>, instance: Type["type"], typeName: TypeName);
    _setChild<PropertyName extends keyof Type["properties"]>(propertyName: PropertyName, child: InterfacePropertyNode<Types, Type, PropertyName>): void;
    child<PropertyName extends keyof Type["properties"]>(propertyName: PropertyName): InterfacePropertyNode<Types, Type, PropertyName>;
    allChildren(): InstanceNodeFor<Types, Type["properties"][keyof Type["properties"]]>[];
    _recursivelyBuildChildren(): void;
}
