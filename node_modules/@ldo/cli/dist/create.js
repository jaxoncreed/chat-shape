"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.create = void 0;
const init_1 = require("./init");
const modifyPackageJson_1 = require("./util/modifyPackageJson");
const generateReadme_1 = require("./generateReadme");
const path_1 = __importDefault(require("path"));
const prompts_1 = __importDefault(require("prompts"));
const loading_cli_1 = __importDefault(require("loading-cli"));
const fs_1 = require("fs");
const ejs_1 = require("ejs");
async function create(directory) {
    const responses = await (0, prompts_1.default)([
        {
            type: "text",
            name: "name",
            message: "Package name:",
            initial: path_1.default.basename(directory),
        },
        {
            type: "text",
            name: "version",
            message: "Version:",
            initial: "1.0.0",
        },
        {
            type: "text",
            name: "description",
            message: "Description:",
        },
        {
            type: "list",
            name: "keywords",
            message: "Keywords (comma separated):",
            separator: ",",
        },
        {
            type: "text",
            name: "author",
            message: "Author:",
        },
        {
            type: "text",
            name: "license",
            message: "License:",
            initial: "MIT",
        },
        {
            type: "text",
            name: "repository",
            message: "Git repository (optional):",
        },
    ]);
    const load = (0, loading_cli_1.default)("Generating package.json");
    const packageJson = {
        name: responses.name,
        version: responses.version,
        description: responses.description,
        keywords: responses.keywords,
        author: responses.author,
        license: responses.license,
        main: "./index.js",
    };
    if (responses.repository) {
        packageJson.repository = {
            type: "git",
            url: responses.repository,
        };
        packageJson.bugs = {
            url: `${responses.repository.replace(/\.git$/, "")}/issues`,
        };
        packageJson.homepage = `${responses.repository.replace(/\.git$/, "")}#readme`;
    }
    await (0, modifyPackageJson_1.savePackageJson)(directory, packageJson);
    load.text = "Initializing LDO";
    await (0, init_1.init)(directory);
    await (0, modifyPackageJson_1.modifyPackageJson)(directory, async (packageJson) => {
        if (!packageJson.scripts)
            packageJson.scripts = {};
        packageJson.scripts.prepublish =
            "npm run build:ldo & npm run generate-readme";
        packageJson.scripts["genenerate-readme"] = `ldo generate-readme --project ./ --shapes ./.shapes --ldo ./.ldo`;
        return packageJson;
    });
    load.text = "Generating index.js";
    const ldoDir = await fs_1.promises.readdir(path_1.default.join(directory, "./.ldo"), {
        withFileTypes: true,
    });
    const indexText = await (0, ejs_1.renderFile)(path_1.default.join(__dirname, "./templates/readme/projectIndex.ejs"), { fileNames: ldoDir.map((file) => file.name) });
    await fs_1.promises.writeFile(path_1.default.join(directory, "index.js"), indexText);
    load.text = "Generating README";
    await (0, generateReadme_1.generateReadme)({
        project: directory,
        shapes: path_1.default.join(directory, ".shapes"),
        ldo: path_1.default.join(directory, ".ldo"),
    });
    load.stop();
}
exports.create = create;
//# sourceMappingURL=create.js.map