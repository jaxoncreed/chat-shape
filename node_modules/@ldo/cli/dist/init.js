"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.init = void 0;
const child_process_promise_1 = require("child-process-promise");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const ejs_1 = require("ejs");
const modifyPackageJson_1 = require("./util/modifyPackageJson");
const DEFAULT_SHAPES_FOLDER = "./.shapes";
const DEFAULT_LDO_FOLDER = "./.ldo";
const POTENTIAL_PARENT_DIRECTORIES = ["src", "lib", "bin"];
async function init(directory) {
    let parentDirectory = directory;
    if (!parentDirectory) {
        parentDirectory = "./";
        const allDirectories = (await fs_extra_1.default.promises.readdir("./", {
            withFileTypes: true,
        })).filter((file) => file.isDirectory());
        for (let i = 0; i < POTENTIAL_PARENT_DIRECTORIES.length; i++) {
            if (allDirectories.some((dir) => dir.name === POTENTIAL_PARENT_DIRECTORIES[i])) {
                parentDirectory = POTENTIAL_PARENT_DIRECTORIES[i];
                break;
            }
        }
    }
    await (0, child_process_promise_1.exec)(`cd ${parentDirectory} && npm install @ldo/ldo --save`);
    await (0, child_process_promise_1.exec)(`cd ${parentDirectory} && npm install @ldo/cli @types/shexj @types/jsonld --save-dev`);
    const shapesFolderPath = path_1.default.join(parentDirectory, DEFAULT_SHAPES_FOLDER);
    await fs_extra_1.default.promises.mkdir(shapesFolderPath);
    const defaultShapePaths = await fs_extra_1.default.promises.readdir(path_1.default.join(__dirname, "./templates/defaultShapes"));
    await Promise.all(defaultShapePaths.map(async (shapePath) => {
        const shapeContent = await (0, ejs_1.renderFile)(path_1.default.join(__dirname, "./templates/defaultShapes", shapePath), {});
        await fs_extra_1.default.promises.writeFile(path_1.default.join(shapesFolderPath, `${path_1.default.parse(shapePath).name}.shex`), shapeContent);
    }));
    await (0, modifyPackageJson_1.modifyPackageJson)(parentDirectory, async (packageJson) => {
        if (!packageJson.scripts) {
            packageJson.scripts = {};
        }
        const ldoFolder = path_1.default.join(parentDirectory, DEFAULT_LDO_FOLDER);
        packageJson.scripts["build:ldo"] = `ldo build --input ${path_1.default.relative(parentDirectory, shapesFolderPath)} --output ${path_1.default.relative(parentDirectory, ldoFolder)}`;
        return packageJson;
    });
    await (0, child_process_promise_1.exec)(`cd ${parentDirectory} && npm run build:ldo`);
}
exports.init = init;
//# sourceMappingURL=init.js.map