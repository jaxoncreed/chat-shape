"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.build = void 0;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const parser_1 = __importDefault(require("@shexjs/parser"));
const schema_converter_shex_1 = __importDefault(require("@ldo/schema-converter-shex"));
const ejs_1 = require("ejs");
const prettier_1 = __importDefault(require("prettier"));
const loading_cli_1 = __importDefault(require("loading-cli"));
const forAllShapes_1 = require("./util/forAllShapes");
async function build(options) {
    const load = (0, loading_cli_1.default)("Peparing Environment");
    load.start();
    if (fs_extra_1.default.existsSync(options.output)) {
        await fs_extra_1.default.promises.rm(options.output, { recursive: true });
    }
    await fs_extra_1.default.promises.mkdir(options.output);
    load.text = "Generating LDO Documents";
    await (0, forAllShapes_1.forAllShapes)(options.input, async (fileName, shexC) => {
        let schema;
        try {
            schema = parser_1.default.construct("https://ldo.js.org/").parse(shexC);
        }
        catch (err) {
            const errMessage = err instanceof Error
                ? err.message
                : typeof err === "string"
                    ? err
                    : "Unknown Error";
            console.error(`Error processing ${fileName}: ${errMessage}`);
            return;
        }
        const [typings, context] = await (0, schema_converter_shex_1.default)(schema);
        await Promise.all(["context", "schema", "shapeTypes", "typings"].map(async (templateName) => {
            const finalContent = await (0, ejs_1.renderFile)(path_1.default.join(__dirname, "./templates", `${templateName}.ejs`), {
                typings: typings.typings,
                fileName,
                schema: JSON.stringify(schema, null, 2),
                context: JSON.stringify(context, null, 2),
            });
            await fs_extra_1.default.promises.writeFile(path_1.default.join(options.output, `${fileName}.${templateName}.ts`), await prettier_1.default.format(finalContent, { parser: "typescript" }));
        }));
    });
    load.stop();
}
exports.build = build;
//# sourceMappingURL=build.js.map