"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateReadme = void 0;
const modifyPackageJson_1 = require("./util/modifyPackageJson");
const forAllShapes_1 = require("./util/forAllShapes");
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const ts_morph_1 = require("ts-morph");
const ejs_1 = require("ejs");
async function generateReadme(options) {
    const packageJson = await (0, modifyPackageJson_1.getPackageJson)(options.project);
    const projectName = packageJson.name;
    const projectDescription = packageJson.description;
    const shapes = [];
    await (0, forAllShapes_1.forAllShapes)(options.shapes, async (fileName, shexC) => {
        const typeFilePath = path_1.default.join(options.ldo, `${fileName}.typings.ts`);
        const typesRaw = await fs_1.promises.readFile(typeFilePath, "utf8");
        const shape = {
            name: fileName,
            shex: shexC,
            typescript: typesRaw,
            types: [],
        };
        listInterfaces(typeFilePath).forEach((interfaceName) => {
            shape.types.push({
                typeName: interfaceName,
                shapeTypeName: `${interfaceName}ShapeType`,
            });
        });
        shapes.push(shape);
    });
    const readmeEjsOptions = {
        projectName,
        projectDescription,
        shapes,
    };
    const finalContent = await (0, ejs_1.renderFile)(path_1.default.join(__dirname, "./templates/readme/", "main.ejs"), readmeEjsOptions);
    await fs_1.promises.writeFile(path_1.default.join(options.project, "README.md"), finalContent);
}
exports.generateReadme = generateReadme;
function listInterfaces(filePath) {
    const project = new ts_morph_1.Project();
    const sourceFile = project.addSourceFileAtPath(filePath);
    const interfaces = sourceFile.getInterfaces().map((iface) => iface.getName());
    return interfaces;
}
//# sourceMappingURL=generateReadme.js.map