"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransactionDataset = void 0;
const mergeDatasetChanges_1 = require("./mergeDatasetChanges");
const SubscribableDataset_1 = require("./SubscribableDataset");
const util_1 = require("./util");
class TransactionDataset extends SubscribableDataset_1.SubscribableDataset {
    constructor(parentDataset, datasetFactory, transactionDatasetFactory) {
        super(datasetFactory, transactionDatasetFactory, datasetFactory.dataset());
        this.parentDataset = parentDataset;
        this.datasetChanges = {};
    }
    addAll(quads) {
        this.updateDatasetChanges({ added: quads });
        return this;
    }
    bulk(changes) {
        this.updateDatasetChanges(changes);
        return this;
    }
    deleteMatches(subject, predicate, object, graph) {
        this.checkIfTransactionCommitted();
        const matching = this.match(subject, predicate, object, graph);
        for (const quad of matching) {
            this.delete(quad);
        }
        return this;
    }
    match(subject, predicate, object, graph) {
        let finalMatch = this.parentDataset.match(subject, predicate, object, graph);
        if (this.datasetChanges.removed) {
            finalMatch = finalMatch.difference(this.datasetChanges.removed);
        }
        if (this.datasetChanges.added) {
            finalMatch = finalMatch.union(this.datasetChanges.added.match(subject, predicate, object, graph));
        }
        return finalMatch;
    }
    get size() {
        return (this.parentDataset.size +
            (this.datasetChanges.added?.difference(this.parentDataset).size || 0) -
            (this.datasetChanges.removed?.intersection(this.parentDataset).size || 0));
    }
    add(quad) {
        this.updateDatasetChanges({ added: [quad] });
        return this;
    }
    delete(quad) {
        this.updateDatasetChanges({ removed: [quad] });
        return this;
    }
    has(quad) {
        return (!this.datasetChanges.removed?.has(quad) &&
            (this.datasetChanges.added?.has(quad) || this.parentDataset.has(quad)));
    }
    [Symbol.iterator]() {
        const addedIterator = (this.datasetChanges.added || [])[Symbol.iterator]();
        let addedNext = addedIterator.next();
        const parentIterator = this.parentDataset[Symbol.iterator]();
        let parentNext = parentIterator.next();
        return {
            next: () => {
                if (!addedNext || !addedNext.done) {
                    const toReturn = addedNext;
                    addedNext = addedIterator.next();
                    return toReturn;
                }
                while (!parentNext.done) {
                    const toReturn = parentNext;
                    parentNext = parentIterator.next();
                    if (!(this.datasetChanges.added &&
                        this.datasetChanges.added.has(toReturn.value)) &&
                        !(this.datasetChanges.removed &&
                            this.datasetChanges.removed.has(toReturn.value))) {
                        return toReturn;
                    }
                }
                return { value: undefined, done: true };
            },
        };
    }
    checkIfTransactionCommitted() {
        if (this.committedDatasetChanges) {
            throw new Error("Transaction has already committed");
        }
    }
    updateDatasetChanges(changes) {
        this.checkIfTransactionCommitted();
        (0, mergeDatasetChanges_1.mergeDatasetChanges)(this.datasetChanges, {
            added: changes.added
                ? this.datasetFactory.dataset(changes.added)
                : undefined,
            removed: changes.removed
                ? this.datasetFactory.dataset(changes.removed)
                : undefined,
        });
    }
    updateParentDataset(datasetChanges) {
        return (0, util_1.updateDatasetInBulk)(this.parentDataset, datasetChanges);
    }
    commit() {
        this.checkIfTransactionCommitted();
        this.committedDatasetChanges = {
            added: this.datasetChanges.added?.difference(this.parentDataset),
            removed: this.datasetChanges.removed?.intersection(this.parentDataset),
        };
        this.updateParentDataset(this.committedDatasetChanges);
    }
    rollback() {
        if (!this.committedDatasetChanges) {
            throw new Error("Cannot rollback. Transaction has not yet been committed");
        }
        this.updateParentDataset({
            added: this.committedDatasetChanges.removed,
            removed: this.committedDatasetChanges.added,
        });
        this.committedDatasetChanges = undefined;
    }
    getChanges() {
        return this.datasetChanges;
    }
}
exports.TransactionDataset = TransactionDataset;
//# sourceMappingURL=TransactionDataset.js.map