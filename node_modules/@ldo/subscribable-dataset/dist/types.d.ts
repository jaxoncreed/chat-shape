import type { DatasetChanges, QuadMatch } from "@ldo/rdf-utils";
import type { Dataset, BaseQuad, DatasetFactory } from "@rdfjs/types";
export type nodeEventListener<InAndOutQuad extends BaseQuad = BaseQuad> = (changes: DatasetChanges<InAndOutQuad>) => void;
export interface IBulkEditableDataset<InAndOutQuad extends BaseQuad = BaseQuad> extends Dataset<InAndOutQuad, InAndOutQuad> {
    bulk(changes: DatasetChanges<InAndOutQuad>): this;
}
export type ISubscribableDatasetFactory<InAndOutQuad extends BaseQuad = BaseQuad> = DatasetFactory<InAndOutQuad, InAndOutQuad, ISubscribableDataset<InAndOutQuad>>;
export interface ISubscribableDataset<InAndOutQuad extends BaseQuad = BaseQuad> extends IBulkEditableDataset<InAndOutQuad> {
    addListener(eventName: QuadMatch, listener: nodeEventListener<InAndOutQuad>): this;
    emit(eventName: QuadMatch, changes: DatasetChanges<InAndOutQuad>): boolean;
    eventNames(): QuadMatch[];
    getMaxListeners(): number;
    listenerCount(eventName: QuadMatch): number;
    listeners(eventName: QuadMatch): nodeEventListener<InAndOutQuad>[];
    off(eventName: QuadMatch, listener: nodeEventListener<InAndOutQuad>): void;
    on(eventName: QuadMatch, listener: nodeEventListener<InAndOutQuad>): this;
    once(eventName: QuadMatch, listener: nodeEventListener<InAndOutQuad>): this;
    prependListener(eventName: QuadMatch, listener: nodeEventListener<InAndOutQuad>): this;
    prependOnceListener(eventName: QuadMatch, listener: nodeEventListener<InAndOutQuad>): this;
    removeAllListeners(eventName: QuadMatch): this;
    removeListener(eventName: QuadMatch, listener: nodeEventListener<InAndOutQuad>): this;
    removeListenerFromAllEvents(listener: nodeEventListener<InAndOutQuad>): this;
    setMaxListeners(n: number): this;
    rawListeners(eventName: QuadMatch): nodeEventListener<InAndOutQuad>[];
    startTransaction(): ITransactionDataset<InAndOutQuad>;
}
export interface ITransactionDatasetFactory<InAndOutQuad extends BaseQuad = BaseQuad> {
    transactionDataset(parent: Dataset<InAndOutQuad, InAndOutQuad>): ITransactionDataset<InAndOutQuad>;
}
export interface ITransactionDataset<InAndOutQuad extends BaseQuad = BaseQuad> extends ISubscribableDataset<InAndOutQuad> {
    readonly parentDataset: Dataset<InAndOutQuad, InAndOutQuad>;
    rollback(): void;
    commit(): void;
    getChanges(): DatasetChanges<InAndOutQuad>;
}
