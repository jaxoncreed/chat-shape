/// <reference types="node" />
import { EventEmitter } from "events";
import type { DatasetChanges, QuadMatch } from "@ldo/rdf-utils";
import type { Dataset, BaseQuad, Term, DatasetFactory } from "@rdfjs/types";
import type { nodeEventListener, ISubscribableDataset, ITransactionDataset, ITransactionDatasetFactory } from "./types";
import { ExtendedDataset } from "@ldo/dataset";
export declare class SubscribableDataset<InAndOutQuad extends BaseQuad = BaseQuad> extends ExtendedDataset<InAndOutQuad> implements ISubscribableDataset<InAndOutQuad> {
    protected datasetFactory: DatasetFactory<InAndOutQuad>;
    protected eventEmitter: EventEmitter;
    protected transactionDatasetFactory: ITransactionDatasetFactory<InAndOutQuad>;
    private listenerHashMap;
    constructor(datasetFactory: DatasetFactory<InAndOutQuad, InAndOutQuad>, transactionDatasetFactory: ITransactionDatasetFactory<InAndOutQuad>, initialDataset?: Dataset<InAndOutQuad, InAndOutQuad>);
    private superAddAll;
    addAll(quads: Dataset<InAndOutQuad, InAndOutQuad> | InAndOutQuad[]): this;
    bulk(changed: DatasetChanges<InAndOutQuad>): this;
    deleteMatches(subject?: Term, predicate?: Term, object?: Term, graph?: Term): this;
    add(quad: InAndOutQuad): this;
    delete(quad: InAndOutQuad): this;
    private triggerSubscriptionForQuads;
    addListener(eventName: QuadMatch, listener: nodeEventListener<InAndOutQuad>): this;
    emit(eventName: QuadMatch, changes: DatasetChanges<InAndOutQuad>): boolean;
    eventNames(): QuadMatch[];
    getMaxListeners(): number;
    listenerCount(eventName: QuadMatch): number;
    listeners(eventName: QuadMatch): nodeEventListener<InAndOutQuad>[];
    off(eventName: QuadMatch, listener: nodeEventListener<InAndOutQuad>): void;
    on(eventName: QuadMatch, listener: nodeEventListener<InAndOutQuad>): this;
    once(eventName: QuadMatch, listener: nodeEventListener<InAndOutQuad>): this;
    prependListener(eventName: QuadMatch, listener: nodeEventListener<InAndOutQuad>): this;
    prependOnceListener(eventName: QuadMatch, listener: nodeEventListener<InAndOutQuad>): this;
    removeAllListeners(eventName: QuadMatch): this;
    removeListener(eventName: QuadMatch, listener: nodeEventListener<InAndOutQuad>): this;
    removeListenerFromAllEvents(listener: nodeEventListener<InAndOutQuad>): this;
    setMaxListeners(n: number): this;
    rawListeners(eventName: QuadMatch): nodeEventListener<InAndOutQuad>[];
    startTransaction(): ITransactionDataset<InAndOutQuad>;
}
