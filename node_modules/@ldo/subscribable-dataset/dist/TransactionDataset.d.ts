import type { Dataset, BaseQuad, Term, DatasetFactory } from "@rdfjs/types";
import type { DatasetChanges } from "@ldo/rdf-utils";
import type { ITransactionDataset, ITransactionDatasetFactory } from "./types";
import { SubscribableDataset } from "./SubscribableDataset";
export declare class TransactionDataset<InAndOutQuad extends BaseQuad = BaseQuad> extends SubscribableDataset<InAndOutQuad> implements ITransactionDataset<InAndOutQuad> {
    readonly parentDataset: Dataset<InAndOutQuad, InAndOutQuad>;
    private datasetChanges;
    private committedDatasetChanges?;
    constructor(parentDataset: Dataset<InAndOutQuad, InAndOutQuad>, datasetFactory: DatasetFactory<InAndOutQuad, InAndOutQuad>, transactionDatasetFactory: ITransactionDatasetFactory<InAndOutQuad>);
    addAll(quads: Dataset<InAndOutQuad, InAndOutQuad> | InAndOutQuad[]): this;
    bulk(changes: DatasetChanges<InAndOutQuad>): this;
    deleteMatches(subject?: Term, predicate?: Term, object?: Term, graph?: Term): this;
    match(subject?: Term | null, predicate?: Term | null, object?: Term | null, graph?: Term | null): Dataset<InAndOutQuad, InAndOutQuad>;
    get size(): number;
    add(quad: InAndOutQuad): this;
    delete(quad: InAndOutQuad): this;
    has(quad: InAndOutQuad): boolean;
    [Symbol.iterator](): Iterator<InAndOutQuad>;
    private checkIfTransactionCommitted;
    private updateDatasetChanges;
    private updateParentDataset;
    commit(): void;
    rollback(): void;
    getChanges(): DatasetChanges<InAndOutQuad>;
}
